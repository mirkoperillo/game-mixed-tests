package eu.trentorise.game.model
import eu.trentorise.game.core.Utility;
import eu.trentorise.game.notification.MessageNotification;

global Utility utils;

global Double green_walk_points;
global Double green_bike_points;
global Double green_transit_points;
global Double park_and_ride_points;
global Double recommendation_bonus;
global Double green_bus_points_base;
global Double green_bus_points_step0;
global Double green_bus_points_step1;
global Double green_bus_points_step2;
global Double green_bus_points_step3;
global Double zero_impact_booster;

global Double bus_threshold_step0;
global Double bus_threshold_step1;
global Double bus_threshold_step2;
global Double bus_threshold_step3;
global Double walk_min;
//global Double walk_max;
//global Double bike_max;
global Double walk_daily_max;
global Double bike_daily_max;
global Double pt_daily_max;
global Double transit_daily_max;
global java.util.ArrayList parkings;


rule "all modes - update green points"
when
	Action ($id : id == "save_itinerary")
	InputData($travelId : data["travelId"], $bike : data["bikeDistance"], $walk : data["walkDistance"], $bus : data["busDistance"], 
		$cable : data["transitDistance"], $train : data["trainDistance"], $car : data["carDistance"], $park : data["park"])
	Game( $gameId: id)
	Player($playerId : id) 
	$pc : PointConcept( name == "green leaves")
	$walkKm : PointConcept(name == "Walk_Km")
	$bikeKm : PointConcept(name == "Bike_Km")
	$transitTrips : PointConcept(name == "Transit_Trips")
	$trainTrips : PointConcept(name == "Train_Trips")
	$busTrips : PointConcept(name == "Bus_Trips")
then
	utils.log("all modes - update green points");
	
	boolean zeroImpact = ($walk != null || $bike != null) && (($bus == null || ((Double)$bus) == 0) 
		&&  ($car == null || ((Double)$car) == 0) && ($train == null || ((Double)$train) == 0) && ($cable == null || ((Double)$cable) == 0));
	
	Double score_zeroImpact = 0.0;
	Double score = 0.0;
	
	//handling of walking Km points
	if($walk != null){
		Double walk_daily = $walkKm.getPeriodCurrentScore("daily");
		utils.log("rule \'all modes - update green points\': counting Walking Km green points");
		Double walkDistance = $walk != null ? (Double) $walk : 0.0;
		walkDistance = walkDistance < walk_min ? 0.0 : walkDistance;
		//walkDistance = walkDistance > walk_max ? walk_max : walkDistance;
		walkDistance = (walk_daily + walkDistance) > walk_daily_max ? (walk_daily_max - walk_daily) : walkDistance;
		score = score + (walkDistance * green_walk_points);
	}
	
	//handling of bike Km points
	if($bike != null){
		Double bike_daily = $bikeKm.getPeriodCurrentScore("daily");
		utils.log("rule \'all modes - update green points\': counting Bike Km green points");
		Double bikeDistance = $bike != null ? (Double) $bike : 0.0;
		//bikeDistance = bikeDistance > bike_max ? bike_max : bikeDistance;
		bikeDistance = (bike_daily + bikeDistance) > bike_daily_max ? (bike_daily_max - bike_daily) : bikeDistance;
		
		score = score  + (bikeDistance * green_bike_points);
	}
	
	//handling of zero impact points
	if (zeroImpact)
		score_zeroImpact = zero_impact_booster * score;	
	
	//handling of P&R points
	if($park != null && parkings.contains((String)$park)){
		utils.log("rule \'all modes - update green points\': counting P&R green points");
		score = score + park_and_ride_points;
	}
	
	//handling of cable/transit points
	if($cable!=null){
		Double transitDaily = $transitTrips.getPeriodCurrentScore("daily");
		utils.log("rule \'all modes - update green points\': counting Cable-Transit green points");
		if (transitDaily < transit_daily_max){
			score = score + green_transit_points;
		}
		else{
			utils.log("rule \'all modes - update green points\': Reached daily limit for transit trips (cable)");
		}
	}
	
	
	//handling of PT points	
	if($bus!=null || $train!=null ){
		utils.log("rule \'all modes - update green points\': counting PT green points");
	
		Double busDistance = ($bus == null) ? 0d : (Double)$bus;
		Double trainDistance = ($train == null) ? 0d :(Double)$train;
		
		Double busPoints = 0.0;
		Double trainPoints = 0.0;
		
		Double ptPoints = 0.0;
		
		Double ptDaily = $busTrips.getPeriodCurrentScore("daily") + $trainTrips.getPeriodCurrentScore("daily");
		
		if (ptDaily < pt_daily_max){
			if ($bus != null){ 
				if (busDistance >= bus_threshold_step0 && busDistance < bus_threshold_step1)
					busPoints = green_bus_points_step0;
				else if (busDistance >= bus_threshold_step1)
					busPoints = green_bus_points_step1;
				else
					busPoints = green_bus_points_base;
			}
			
			if ($train != null){
				if (trainDistance >= bus_threshold_step0 && trainDistance < bus_threshold_step1)
					trainPoints = green_bus_points_step0;
				else if (trainDistance >= bus_threshold_step1)
					trainPoints = green_bus_points_step1;
				else
					trainPoints = green_bus_points_base;
			}
			
			if($bus!=null && $train!=null && (ptDaily >= (pt_daily_max -1))){
			//double PT trip and reached limit -> need to count only 1 PT trip (we count the MAX)
				ptPoints = busPoints > trainPoints ? busPoints : trainPoints;
			}
			else ptPoints = busPoints + trainPoints;
				
		}
		else{
			utils.log("rule \'all modes - update green points\': Reached daily limit for public transport trips");
			ptPoints = 0.0;
		}
			
		score = score + ptPoints;
	}
	
	MessageNotification mn = new MessageNotification($gameId,$playerId,null);
	mn.addData("travelId", $travelId);
	score = (Double) Math.rint(score + score_zeroImpact);
	mn.addData("score", score);
	insert(mn);
	
	$pc.setScore($pc.getScore() + score);
	update($pc);

end


/*rule "public transport update green points"
when
	InputData($bus : data["busDistance"] !=null || $train : data["trainDistance"] != null )
	$pc : PointConcept(name == "green leaves")
	$trainTrips : PointConcept(name == "Train_Trips")
	$busTrips : PointConcept(name == "Bus_Trips")
then

	utils.log("apply \'public transport update green points\'");	
	if ($bus == null) 
		$bus = 0d;
	if ($train == null)
		$train = 0d;
	Double ptDistance = (Double)$bus + (Double)$train;
	Double ptPoints;
	
	Double ptDaily = $busTrips.getPeriodCurrentScore("daily") + $trainTrips.getPeriodCurrentScore("daily");
	
	if (ptDaily < pt_daily_max){
		if (ptDistance >= bus_threshold_step0 && ptDistance < bus_threshold_step1)
			ptPoints = green_bus_points_step0;
		else if (ptDistance >= bus_threshold_step1)
			ptPoints = green_bus_points_step1;
		else
			ptPoints = green_bus_points_base;
	}
	else{
		utils.log("reached daily limit for public transit trips");
		ptPoints = 0.0;
	}	
		
	$pc.setScore($pc.getScore() + (Double) Math.rint(ptPoints));
	
	update($pc); 
end
*/

rule "recommendation bonus"
	salience 1
when
	Action ($id : id == "app_sent_recommandation")
    $pc : PointConcept(name == "green leaves")
then
	utils.log("apply \'recommendation bonus\'");
	$pc.setScore($pc.getScore() + recommendation_bonus);
    update($pc); 
end
