package eu.trentorise.game.model
import eu.trentorise.game.core.Utility;

global Utility utils;
global Double walk_min;
global Double walk_max;
global Double bike_max;

rule "update 0-impact counters"
lock-on-active
when
	InputData (
	    ($walk : data["walkDistance"] != null || $bike : data["bikeDistance"] != null) &&
		($bus : data["busDistance"] == null || ((Double)$bus)==0) && 
		($train : data["trainDistance"] == null || ((Double)$train)==0) &&
		($car : data["carDistance"]==null || ((Double)$car)==0) &&
		($transit : data["transitDistance"]==null || ((Double)$transit)==0))
		$zeroImpactTrips : PointConcept(name == "ZeroImpact_Trips")
then
	Boolean incremented= new Boolean(false);
	if($walk!=null){
	if((Double) $walk >= walk_min){
		utils.log("apply \'ZeroImpact_Trips update\'");
		double trips = $zeroImpactTrips.getScore() + 1.0d;
		modify($zeroImpactTrips) { setScore(trips) };
		incremented=true;
		}
	}
	if(incremented==false && $bike!=null){
		utils.log("apply \'ZeroImpact_Trips update\'");
		double trips = $zeroImpactTrips.getScore() + 1.0d;
		modify($zeroImpactTrips) { setScore(trips) };
	}
end

rule "update walk counters"
lock-on-active
when
    InputData( $km : data["walkDistance"] != null, $km >= walk_min)
    $walkTrips : PointConcept(name == "Walk_Trips")
    $walkKm : PointConcept(name == "Walk_Km")
then
	utils.log("apply \'Walk_Trips and Walk_Km update\'");
	double trips = $walkTrips.getScore() + 1.0d;
	modify($walkTrips) { setScore(trips) };
	double kmScore = $walkKm.getScore() + (Double) $km;
	modify($walkKm) { setScore(kmScore) };
end


rule "update bike and bike sharing counters"
lock-on-active
when
    InputData( $km : data["bikeDistance"] != null, $bs : data["bikesharing"])
    $bikeTrips : PointConcept(name == "Bike_Trips")
    $bikeKm : PointConcept(name == "Bike_Km")
    $bsTrips : PointConcept(name == "BikeSharing_Trips")
    $bsKm : PointConcept(name == "BikeSharing_Km")
then
	if($bs !=null){
		if((boolean) $bs == true) {
			utils.log("apply \'BikeSharing_Trips and BikeSharing_Km update\'");
			double trips = $bsTrips.getScore() + 1.0d;
			modify($bsTrips) { setScore(trips) };
			double kmScore = $bsKm.getScore() + (Double) $km;
			modify($bsKm) { setScore(kmScore) };
		} 
	}
	utils.log("apply \'Bike_Trips and Bike_Km update\'");
	double trips = $bikeTrips.getScore() + 1.0;
	modify($bikeTrips) { setScore(trips) };
	double kmScore = $bikeKm.getScore() + (Double) $km;
	modify($bikeKm) { setScore(kmScore) };
end


rule "update bus counters"
lock-on-active
when
    InputData( $km : data["busDistance"] != null)
    $busTrips : PointConcept(name == "Bus_Trips")
    $busKm : PointConcept(name == "Bus_Km")
then
	utils.log("apply \'Bus_Trips and Bus_Km update\'");
	double trips = $busTrips.getScore() + 1.0;
	modify($busTrips) { setScore(trips) };
	double kmScore = $busKm.getScore() + (Double) $km;
	modify($busKm) { setScore(kmScore) };
end


rule "update train counters"
lock-on-active
when
    InputData( $km : data["trainDistance"] != null)
    $trainTrips : PointConcept(name == "Train_Trips")
    $trainKm : PointConcept(name == "Train_Km")
then
	utils.log("apply \'Train_Trips and Train_Km update\'");
	double trips = $trainTrips.getScore() + 1.0;
	modify($trainTrips) { setScore(trips) };
	double kmScore = $trainKm.getScore() + (Double) $km;
	modify($trainKm) { setScore(kmScore) };
end

rule "update car counters"
lock-on-active
when
    InputData( $km : data["carDistance"] != null)
    $carTrips : PointConcept(name == "Car_Trips")
    $carKm : PointConcept(name == "Car_Km")
then
	utils.log("apply \'Car_Trips and Car_Km update\'");
	double trips = $carTrips.getScore() + 1.0;
	modify($carTrips) { setScore(trips) };
	double kmScore = $carKm.getScore() + (Double) $km;
	modify($carKm) { setScore(kmScore) };
end

rule "update no-car counters"
lock-on-active
when
	Action ($id : id == "save_itinerary")
    InputData( $km : data["carDistance"] == null, $walk : data["walkDistance"], 
    	$transit : data["transitDistance"],
    	$bus : data["busDistance"], $bike : data["bikeDistance"], $train : data["trainDistance"])
    $noCarTrips : PointConcept(name == "NoCar_Trips")
then
	boolean isValidNoCar = false;
	if ($walk == null || (Double)$walk >= walk_min)
		isValidNoCar = true;
		
	if (isValidNoCar == false) {
		if ($bus != null && (Double)$bus > 0) 
			isValidNoCar = true;
		else if ($bike != null && (Double)$bike > 0)
			isValidNoCar = true;
		else if ($train != null && (Double)$train > 0)
			isValidNoCar = true;
		else if ($transit != null && (Double)$transit > 0)
			isValidNoCar = true;
	}
	
	if (isValidNoCar == true) {
		utils.log("apply \'NoCar_Trips update\'");
		double trips = $noCarTrips.getScore() + 1.0;
		modify($noCarTrips) { setScore(trips) };
	}
end

rule "update recommendation counters"
lock-on-active
when
	Action ($id : id == "app_sent_recommandation")
	$reccomend : PointConcept(name == "Recommendations")
then
	utils.log("apply \'Recommendations update\'");
	double reccomandations = $reccomend.getScore() + 1.0;
	modify($reccomend) { setScore(reccomandations) };
end

rule "update P&R counters"
lock-on-active
when
    InputData( $park : data['park'] != null)
    $PandR : PointConcept(name == "PandR_Trips")
then
	utils.log("apply \'PandR_Trips update\'");
	double trips = $PandR.getScore() + 1.0;
	modify($PandR) { setScore(trips) };
end

rule "update Cable counters"
lock-on-active
when
	InputData( $km : data["transitDistance"] != null)
    $transitTrips : PointConcept(name == "Transit_Trips")
then
	utils.log("apply \'Transit_Trips update\'");
	double trips = $transitTrips.getScore() + 1.0;
	modify($transitTrips) { setScore(trips) }; 
end
